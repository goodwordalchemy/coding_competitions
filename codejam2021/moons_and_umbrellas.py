from functools import lru_cache
DEV = True

sample_text = """10
2 3 CJ?CC?
4 2 CJCJ
1 3 C?J
2 5 ??J???
2 -5 ??JJ??
2 3 ??
2 3 C?
2 3 ?C
2 3 ?
2 3 ??J?J????CCJJJ?C??JC?C?CJ???CCJJJ??JJJCC???JCJ??CC?CJCJ?CCJ?CJJCJCC?JCC??JJC??CJ??CCJJ???CJ???J?JCJ?CJ?J?JJCJJCCCCC?JJC??CC?J?J?CJCJJ?JC?JC?C??C???J?CJJJ?CCJC?J?C???JJJJCCCCJ?JCJ?C??J???J??J????CJ?JC?JJCJCJCC?C?JJCCJJ?JJC?JJJJ??CCJCCCJJ?J?JJ???J?CCJ?CJCC?CJ??JCJC??J???JCJC?CCJCJC?CJCCJC?JJ?JJ?C?JCJJJ?JCJJJCJCJJJJ?JCJC?CCCJJCCCC?J?C?J?JC?C??CC?CJJ?????JJJJCJC?CCJJ?CCCJCJ?JCJCJJ?JJCJ?CJCJJ??C?CJCCJJCC?JCC?J???CJ?JJJJJCCJCJJCC?JCCC??JC??CC??JJ?JC?JJCCC????CCC?CCJ??CCJC??CCCCCCCC?CJ??JCJCC?JCJ?J??CJ??C?CJJCJJ???J?CJJJ?CJ??CCCCJJJ?C??C?C?CCJ??JJJ??JJJ??JCJJC?CCCCCCC?C?CJCJ??J?CCJC??CJJ?JJJCJCJJJJC?CC??JCJCJC?JC?JC?JJCJJCJC?J?J?C?CCJJCJJJJ??JJJJ?JCJCJJCCCC???CC?J?JC??JCJC?J?CJCCC????C?JJCC??CCJ?CCCC?CJJ?JCCJCCJ?JJCJ??CJJJCCJ?CJCJ?J?CJCC??C?JJC?JCCJJCJC????J??CCJJC?JCJCJ?CCJ?CJCCCC?CJJJCJJC?J?CC?JJ?C?JJJ?J??C??JC??C?JC?JJC?CCJJC?CJJCCCJCJ?J?J?JJ?JJ?JJC???CJCJJJC??J?J?JJCJCJJ?JJ?C?JJCCCJJ?C?CJCC?CC??JCCCJCC?C?J?C?CJCCC?C?J??J?C???JJCC?CJC?C?C?JJ?JCCJJJ?CCCCCCCCJC?CC?JCJ?JJJCCCCJCCJCJJCJ???CCC?
"""


if DEV:
    from collections import deque
    from unittest.mock import MagicMock
    sample_lines = deque(sample_text.split("\n"))

    input = MagicMock(side_effect=lambda : sample_lines.popleft())



def parse_input():
    n_test_cases = int(input())
    test_cases = []
    for t in range(n_test_cases):
        X, Y, S = input().split()
        test_cases.append((int(X), int(Y), S))

    return test_cases

def moons_and_umbrellas_rec(X, Y, S):
    @lru_cache(None)
    def dp(i, prev_was_c):
        if i == len(S):
            return 0
        elif S[i] == "C":
            return (not prev_was_c) * Y + dp(i+1, True)
        elif S[i] == "J":
            return prev_was_c * X + dp(i+1, False)
        else:
            return min(
                (not prev_was_c) * Y + dp(i+1, True),
                prev_was_c * X + dp(i+1, False)
            )

    if len(S) == 1:
        return 0
    elif S[0] == "?":
        return min(dp(1, True), dp(1, False))
    else:
        return dp(1, S[0] == "C")

def moons_and_umbrellas(X, Y, S):
    dp = [[float('inf'), float('inf')] for _ in range(len(S))]

    if S[0] == "C":
        dp[0][0] = 0
    elif S[0] == "J":
        dp[0][1] = 0
    else:
        dp[0][0] = 0
        dp[0][1] = 0


    for i in range(1, len(S)):
        if S[i] == "C":
            dp[i][0] = min(dp[i-1][0], Y + dp[i-1][1])
        elif S[i] == "J" :
            dp[i][1] = min(dp[i-1][1], X + dp[i-1][0])
        else:
            dp[i][0] = min(dp[i-1][0], Y + dp[i-1][1])
            dp[i][1] = min(dp[i-1][1], X + dp[i-1][0])

    # print(S, dp)
    # print()
    return min(dp[-1])


def main():
    for i, test_case in enumerate(parse_input()):
        print("Case #{}: {}".format(i+1, moons_and_umbrellas(*test_case)))

if __name__ == '__main__':
    main()
